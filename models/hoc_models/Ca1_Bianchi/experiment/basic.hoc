

//////// load needed templates////////////
//load_file("nrngui.hoc")
load_file("stdrun.hoc")
load_file("../template/load_templates.hoc")

objref econ
show_errs=1
debug_lev=1
econ=new ExperimentControl(show_errs,debug_lev)
econ.self_define(econ)

econ.morphology_dir = "../morphology/n123"       // set location for morphology files
econ.add_lib_dir("Terrence","../lib")                     // set location for library files
econ.generic_dir    = "../experiment"             // set location for cell-setup file

v_init=-70

econ.xopen_geometry_dependent("cell")                                        // load raw cell morphology
econ.xopen_geometry_dependent("cell-analysis")                               // load user-defined semantics on morphology
cell_analysis(econ)
printf("Opening cell setup\n")                                               // load cell-setup to
econ.xopen_generic("cell-setup")                                             // specify all mechanisms,
printf("Opened. Setting up cell\n")                                          // membrane properties etc
cell_setup(econ)

///////////////////Load File//////////////////////

//load_file("2_sessio.ses")
//cvode_active(0)

////////////////////Main///////////////////


proc main(){

  del=100
  tstop=1000+del+200
  tstopI=1000
  in=0

  th=-20
  access soma
  //insert_APC(th)

  for u= in,15{


current=u*0.1
access soma
//insert_IClamp(tstopI,current,del)
}
}

main()

forall{insert vmax}


/*//A-típusú K-csatorna sűrűségének megváltoztatása


objref num
num = new Vector(apical_dendrite[47].nseg)                          // akkora a vektor (num.size()), ahány seg van a dendritben
num.x[0]=0									//így lehet megadni a "num" nevű vektor 0. elemének értékét

for i=1,num.size()-1{                       // vektor feltöltése
	num.x[i]=num.x[i-1]+(1/(num.size()-1))	// num.x[i] (tehát a num nevű vektor elemei) azt fogja megadni hogy a section-ön (itt a dendrit) belül hol akarom változtatni a csatorna sűrűségét. 0 a dendrit eleje, 1 a vége.
	if (num.x[i]>1){                        // előfordulhat, hogy az utolsó kicsit nagyobb lesz mint 1, mert a következő ciklusban nem tetszik neki
		num.x[i]=1
		}
	}

for i=0,num.size()-1{        // itt változtatom meg a csatornák sűrűségét ami a gkabar_kad változó disztális csatornák esetében, és gkabar_kap proximális esetben
	apical_dendrite[47].gkabar_kad(num.x[i])=apical_dendrite[47].gkabar_kad(num.x[i])-(apical_dendrite[47].gkabar_kad(num.x[i])*0.9)
	print apical_dendrite[47].gkabar_kap(num.x[i])
	}
//apical_dendrite[37].gkabar_kap(1)=apical_dendrite[37].gkabar_kap(1)-(apical_dendrite[37].gkabar_kap(1)*0.9)
	//print apical_dendrite[37].gkabar_kap(1)
*/
/*
// PROCEDURE

objref num

proc A_type_K() {

	percentage=$1
	channel=$2

	num = new Vector(nseg)
	num.x[0]=0

	for i=1,num.size()-1{
		num.x[i]=num.x[i-1]+(1/(num.size()-1))
		if (num.x[i]>1){
			num.x[i]=1
			}
		}

	for i=0,num.size()-1{
		channel(num.x[i])=channel(num.x[i])-(channel(num.x[i])*(percentage/100))
		print channel(num.x[i])
		}
}

objref num2

proc A_type_K_original_value() {
	percentage=$1

	num2 = new Vector(nseg)
	num2.x[0]=0

	for i=1,num2.size()-1{
		num2.x[i]=num2.x[i-1]+(1/(num2.size()-1))
		if (num2.x[i]>1){
			num2.x[i]=1
			}
		}

	for i=0,num2.size()-1{
		gkabar_kad(num2.x[i])=gkabar_kad(num2.x[i])/(1-(percentage/100))
		print gkabar_kad(num.x[i])
		}
}
*/

/*
/// szinapszis:

objref ampasyn, ns, nc

apical_dendrite[37] ampasyn = new Exp2Syn(0.5)
ampasyn.tau1 = 0.3
ampasyn.tau2 = 3

ns = new NetStim(.5)
ns.start = 100
ns.interval = 1000

nc = new NetCon(ns, ampasyn)
nc.weight = 0.1
nc.delay = 0.0
*/

objref num

proc A_type_K() {

	percentage=$1			// azt jelenti, hogy a percentage-t adom meg elso parameterkent mikor meghivom a procedurat

	num = new Vector(nseg)
	num.x[0]=0

	for i=1,num.size()-1{
		num.x[i]=num.x[i-1]+(1/(num.size()-1))
		if (num.x[i]>1){
			num.x[i]=1
			}
		}

	for i=0,num.size()-1{
		gkabar_kad(num.x[i])=gkabar_kad(num.x[i])-(gkabar_kad(num.x[i])*(percentage/100))
		print gkabar_kad(num.x[i])
		}
}

objref ampasyn, ns, nc, nmdar, ns2, nc2

proc ampa(){								// meghivni: dendrite[129] ampa(ampasyn,0.5,1,0.1,1000,100)

        ampasyn= new Exp2Syn($1)
        ampasyn.tau1 = $2
        ampasyn.tau2 = $3

        ns = new NetStim($1)
		ns.start = $4
        ns.interval = $5
		ns.number=$6

        nc = new NetCon(ns,ampasyn)
        nc.weight = $7
}

objref ampasyn2, ampasyn3, ampasyn4, ampasyn5, ampasyn6, ampasyn7, ns2, ns3, ns4, ns5, ns6, ns7, nc1_1, nc1_2, nc2_1, nc2_2, nc3_1, nc3_2, nc4_1, nc4_2
objref nc5_1, nc5_2, nc6_1, nc6_2, nc7_1, nc7_2, nmdar, nmdar2, nmdar3, nmdar4, nmdar5, nmdar6, nmdar7, ns2, ns3, ns4, ns5, ns6, ns7

proc ampa_nmda(){								// meghivni: dendrite[129] ampa(ampasyn,0.5,1,0.1,1000,100)

        ampasyn= new Exp2Syn($1)
        ampasyn.tau1 = $2
        ampasyn.tau2 = $3

		ns = new NetStim($1)
		ns.start = $4
        ns.interval = $5
		ns.number=$6

        nc1_1 = new NetCon(ns,ampasyn)
        nc1_1.weight = $7

        nmdar = new NMDA($1)

        nc1_2 = new NetCon(ns,nmdar)
        nc1_2.weight = $7*0.396
}



proc ampa_nmda2(){								// meghivni: dendrite[129] ampa(ampasyn,0.5,1,0.1,1000,100)

        ampasyn2= new Exp2Syn($1)
        ampasyn2.tau1 = $2
        ampasyn2.tau2 = $3

		ns2 = new NetStim($1)
		ns2.start = $4
        ns2.interval = $5
		ns2.number=$6

        nc2_1 = new NetCon(ns2,ampasyn2)
        nc2_1.weight = $7

        nmdar2 = new NMDA($1)

        nc2_2 = new NetCon(ns2,nmdar2)
        nc2_2.weight = $7*0.396
}

proc ampa_nmda3(){								// meghivni: dendrite[129] ampa(ampasyn,0.5,1,0.1,1000,100)

        ampasyn3= new Exp2Syn($1)
        ampasyn3.tau1 = $2
        ampasyn3.tau2 = $3

		ns3 = new NetStim($1)
		ns3.start = $4
        ns3.interval = $5
		ns3.number=$6

        nc3_1 = new NetCon(ns3,ampasyn3)
        nc3_1.weight = $7

        nmdar3 = new NMDA($1)

        nc3_2 = new NetCon(ns3,nmdar3)
        nc3_2.weight = $7*0.396
}

proc ampa_nmda4(){								// meghivni: dendrite[129] ampa(ampasyn,0.5,1,0.1,1000,100)

        ampasyn4= new Exp2Syn($1)
        ampasyn4.tau1 = $2
        ampasyn4.tau2 = $3

		ns4 = new NetStim($1)
		ns4.start = $4
        ns4.interval = $5
		ns4.number=$6

        nc4_1 = new NetCon(ns4,ampasyn4)
        nc4_1.weight = $7

        nmdar4 = new NMDA($1)

        nc4_2 = new NetCon(ns4,nmdar4)
        nc4_2.weight = $7*0.396
}

proc ampa_nmda5(){								// meghivni: dendrite[129] ampa(ampasyn,0.5,1,0.1,1000,100)

        ampasyn5= new Exp2Syn($1)
        ampasyn5.tau1 = $2
        ampasyn5.tau2 = $3

		ns5 = new NetStim($1)
		ns5.start = $4
        ns5.interval = $5
		ns5.number=$6

        nc5_1 = new NetCon(ns5,ampasyn5)
        nc5_1.weight = $7

        nmdar5 = new NMDA($1)

        nc5_2 = new NetCon(ns5,nmdar5)
        nc5_2.weight = $7*0.396
}

proc ampa_nmda6(){								// meghivni: dendrite[129] ampa(ampasyn,0.5,1,0.1,1000,100)

        ampasyn6= new Exp2Syn($1)
        ampasyn6.tau1 = $2
        ampasyn6.tau2 = $3

		ns6 = new NetStim($1)
		ns6.start = $4
        ns6.interval = $5
		ns6.number=$6

        nc6_1 = new NetCon(ns6,ampasyn6)
        nc6_1.weight = $7

        nmdar6 = new NMDA($1)

        nc6_2 = new NetCon(ns6,nmdar6)
        nc6_2.weight = $7*0.396
}

proc ampa_nmda7(){								// meghivni: dendrite[129] ampa(ampasyn,0.5,1,0.1,1000,100)

        ampasyn7= new Exp2Syn($1)
        ampasyn7.tau1 = $2
        ampasyn7.tau2 = $3

		ns7 = new NetStim($1)
		ns7.start = $4
        ns7.interval = $5
		ns7.number=$6

        nc7_1 = new NetCon(ns7,ampasyn7)
        nc7_1.weight = $7

        nmdar7 = new NMDA($1)

        nc7_2 = new NetCon(ns7,nmdar7)
        nc7_2.weight = $7*0.396
}
